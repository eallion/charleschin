<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.eallion.com</id>
    <title>eallion&apos;s note</title>
    <updated>2019-12-17T16:43:39.333Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.eallion.com"/>
    <link rel="self" href="https://blog.eallion.com/atom.xml"/>
    <logo>https://blog.eallion.com/images/avatar.png</logo>
    <icon>https://blog.eallion.com/favicon.ico</icon>
    <rights>All rights reserved 2019, eallion&apos;s note</rights>
    <entry>
        <title type="html"><![CDATA[Ubuntu 19.10 优化]]></title>
        <id>https://blog.eallion.com/post/ubuntu-1910</id>
        <link href="https://blog.eallion.com/post/ubuntu-1910">
        </link>
        <updated>2019-12-17T16:39:37.000Z</updated>
        <summary type="html"><![CDATA[<p>作为一个一直使用长期支持版本 LTS 的人，这次也升级到了 Ubuntu 19.10 。<br>
因为这次新版本对性能的提升还是比较大的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>作为一个一直使用长期支持版本 LTS 的人，这次也升级到了 Ubuntu 19.10 。<br>
因为这次新版本对性能的提升还是比较大的。</p>
<!-- more -->
<p>最重要的是安装的时候可以选择 ZFS 文件系统。<br>
而且原生支持 Nvidia 显卡驱动了，安装时勾上即可。<br>
安装时可选择最小化安装，这样安装好后，系统里就没有那些 <a href="https://twitter.com/search?q=%23%E7%8A%80%E5%88%A9%E8%80%8C%E6%97%A0%E7%94%A8">#犀利而无用</a>  的软件。<br>
Live CD 的启动项也有 safe graphics 选项了，即不用手动添加 nomodeset 避免黑屏。</p>
<blockquote>
<p>这篇文章吹爆了 Ubuntu 19.10<br>
<a href="https://arstechnica.com/gadgets/2019/11/ubuntu-19-10-quite-simply-the-best-ubuntu-canonical-has-ever-released/">Ubuntu 19.10: It’s fast, like “make old hardware feel new” fast</a></p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://blog.eallion.com/post-images/1576600848523.png" alt="Ubuntu 19.10"></figure>
<blockquote>
<p>实机安装 桌面效果截图</p>
</blockquote>
<p>硬件环境：</p>
<pre><code class="language-bash">eallion@eallion:~$ screenfetch

OS: Ubuntu 19.10 eoan
Kernel: x86_64 Linux 5.3.0-23-generic
Uptime: 2h 26m
Packages: 2176
Shell: zsh 5.7.1
Resolution: 3840x1080
DE: GNOME 
WM: GNOME Shell
WM Theme: Adwaita
GTK Theme: Yaru [GTK2/3]
Icon Theme: Yaru
Font: Ubuntu 11
CPU: Intel Core i5-7500 @ 4x 3.8GHz [27.8°C]
GPU: GeForce GTX 1050 Ti
RAM: 9011MiB / 15717MiB
</code></pre>
<hr>
<h3 id="基础优化">基础优化</h3>
<h4 id="1-换软件源">1、换软件源</h4>
<p>在 Dash 里搜索 <code>软件和更新</code> ，依次点击 <code>Ubuntu软件</code> - <code>下载自</code> - <code>其他站点</code> - <code>中国</code>：<br>
然后选择一个源服务器，推荐阿里云和清华：</p>
<ul>
<li>mirrors.aliyun.com</li>
<li>mirrors.tuna.tsinghua.edu.cn</li>
</ul>
<p>然后 update 一下：</p>
<pre><code>sudo apt update
sudo apt upgrade
</code></pre>
<h4 id="2-系统设置">2、系统设置</h4>
<p>在<code>系统设置</code>里按自己的习惯设置即可。</p>
<h4 id="3-安装-gnome-tweaks">3、安装 GNOME Tweaks</h4>
<pre><code>sudo apt-get install gnome-tweak-tool 
</code></pre>
<h4 id="4-去鼠标加速">4、去鼠标加速</h4>
<p>对于 FPS 玩家，尤其推荐去掉鼠标加速。<br>
4.1. 在 <code>GNOME Tweaks</code> 点击 <code>键盘和鼠标</code> 在 <code>鼠标</code>-<code>加速配置</code>里选择<code>Flat</code>。<br>
4.2. 在 <code>系统设置</code>里<code>设备</code>-<code>鼠标和触摸板</code>-<code>鼠标</code>-<code>鼠标速度</code>调节自己适应的鼠标速度。</p>
<h4 id="5-安装-gdebi">5、安装 Gdebi</h4>
<pre><code>sudo apt install gdebi
</code></pre>
<p>安装 deb 软件包时，可以用 GDebi 替换 Ubuntu 软件中心。</p>
<h4 id="6-安装-chrome">6、安装 Chrome</h4>
<blockquote>
<p>下载地址：<a href="https://www.google.com/chrome/" title="https://www.google.com/chrome/">https://www.google.com/chrome/</a></p>
</blockquote>
<h4 id="7-dash-to-dock">7、Dash to Dock</h4>
<p>7.1 浏览器安装插件</p>
<ul>
<li>Chrome :  <a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep" title="GNOME Shell integration">GNOME Shell integration</a></li>
<li>Firefox: <a href="https://extensions.gnome.org/" title="https://extensions.gnome.org/">https://extensions.gnome.org</a></li>
</ul>
<p>7.2 安装 Gnome Shell Extensions</p>
<pre><code>sudo apt install gnome-shell-extensions
</code></pre>
<p>7.3 安装 Dash to Dock</p>
<blockquote>
<p><a href="https://extensions.gnome.org/extension/307/dash-to-dock/" title="https://extensions.gnome.org/extension/307/dash-to-dock/">https://extensions.gnome.org/extension/307/dash-to-dock/</a></p>
</blockquote>
<h4 id="8-hide-top-bar">8、Hide Top Bar</h4>
<p>8.1 参考 7.1 ，如果已安装插件，略过此步。<br>
8.2 参考 7.2 ，如果已安装，略过此步。<br>
8.3 安装 Hide Top Bar</p>
<blockquote>
<p><a href="https://extensions.gnome.org/extension/545/hide-top-bar/" title="https://extensions.gnome.org/extension/545/hide-top-bar/">https://extensions.gnome.org/extension/545/hide-top-bar/</a></p>
</blockquote>
<h4 id="9-安装五笔拼音">9、安装五笔拼音</h4>
<pre><code>sudo apt install fcitx-table-wbpy
</code></pre>
<h4 id="10-preload">10、Preload</h4>
<p>Preload 是一个后台运行的守护进程，它分析用户行为和频繁运行的应用，让你更快打开常用的软件。</p>
<pre><code>sudo apt-get install preload
</code></pre>
<h4 id="11-安装-tlp-和-cpufreq若有需要">11、安装 TLP 和 CPUFREQ（若有需要）</h4>
<p>减少过热和使用节能模式。</p>
<pre><code>sudo add-apt-repository ppa:linrunner/tlp
sudo apt-get update
sudo apt-get install tlp tlp-rdw
sudo tlp start
</code></pre>
<p>安装 CPUFREQ 指示器：</p>
<pre><code>sudo apt-get install indicator-cpufreq
</code></pre>
<p>重启你的电脑即可在指示器上选择 Powersave 模式。</p>
<h4 id="12-提高-apt-下载速度-apt-fast">12、提高 Apt 下载速度 Apt-fast</h4>
<p>apt-fast 是 apt-get 的一个 shell 脚本包装器，通过从多连接同时下载包来提升更新及包下载速度。 如果你经常使用终端以及 apt-get 来安装和更新包，你也许会想要试一试 apt-fast 。<br>
安装 apt-fast：</p>
<pre><code>sudo add-apt-repository ppa:apt-fast/stable
sudo apt-get update
sudo apt-get install apt-fast
</code></pre>
<h4 id="13-双系统时间设置">13、双系统时间设置</h4>
<p>解决切换到 Windows 发现时间不对的问题。</p>
<pre><code>sudo apt install ntpdate
sudo ntpdate ntp.aliyun.com #阿里云的时间服务器
sudo hwclock --localtime --systohc #将时间更新到硬件上
</code></pre>
<h4 id="14-配置终端">14、 配置终端</h4>
<blockquote>
<p>参考：<a href="https://eallion.com/ubuntuzsh" title="https://eallion.com/ubuntuzsh">https://eallion.com/ubuntuzsh</a></p>
</blockquote>
<p>终端推荐安装 Guake ，又好看又方便：</p>
<h5 id="141-安装-guake">14.1. 安装 Guake ：</h5>
<p>直接安装的 Guake 版本不够新，而且中文显示不全。<br>
推荐源码安装：</p>
<pre><code>sudo apt update
sudo apt -y install git curl wget
cd ~
git clone https://github.com/Guake/guake.git
cd guake
./scripts/bootstrap-dev-debian.sh run make
make
sudo make install
</code></pre>
<p>如果需要直接安装：</p>
<pre><code>sudo apt install guake
</code></pre>
<h5 id="142-安装-oh-my-zsh">14.2. 安装 Oh My Zsh ：</h5>
<p>安装 Zsh：</p>
<pre><code>sudo apt update
sudo apt install zsh
</code></pre>
<p>将 Zsh 设置为默认 Shell ：</p>
<pre><code>chsh -s /bin/zsh
</code></pre>
<p>查看当前所用的 Shell ： <code>echo $SHELL</code>。</p>
<p>安装 Oh My Zsh ：</p>
<p>以下3种方式选择1种：</p>
<ul>
<li>via wget</li>
</ul>
<pre><code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
</code></pre>
<ul>
<li>via curl</li>
</ul>
<pre><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
</code></pre>
<ul>
<li>Manual</li>
</ul>
<pre><code>curl -Lo install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
sh install.sh
</code></pre>
<p>字体可以安装 Powerline ，但是推荐安装符号更全的 Ubuntu Nerd Font   或者 Knack Nerd Font Mono。在 Guake 里设置好。</p>
<blockquote>
<p>下载：<a href="https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Ubuntu/Regular/complete/Ubuntu%20Nerd%20Font%20Complete.ttf">Ubuntu Nerd Font</a><br>
下载：<a href="https://github.com/ryanoasis/nerd-fonts/raw/v1.2.0/patched-fonts/Hack/Regular/complete/Knack%20Regular%20Nerd%20Font%20Complete%20Mono.ttf">Knack Nerd Font Mono</a></p>
</blockquote>
<p>下载后直接安装字体即可。</p>
<p>安装主题 Powerlevel9k ：</p>
<pre><code>git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k
</code></pre>
<p>安装插件：</p>
<pre><code># autojump 切换目录
sudo apt install autojump
    
# fasd 快速访问文件或目录
sudo apt install fasd
    
# zsh-autosuggestions 历史命令建议
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
    
# zsh-syntax-highlighting 命令行语法高亮
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
</code></pre>
<p>设置 Oh My Zsh ：</p>
<pre><code>vi ~/.zshrc
</code></pre>
<p>需要修改如下几个地方：</p>
<pre><code>    ******
POWERLEVEL9K_MODE='nerdfont-complete'
ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;
    ******
ENABLE_CORRECTION=&quot;true&quot;
    ******
COMPLETION_WAITING_DOTS=&quot;true&quot;
    ******
plugins=( git extract fasd zsh-autosuggestions zsh-syntax-highlighting )
    ******
</code></pre>
<p>让配置生效：</p>
<pre><code>source ~/.zshrc
</code></pre>
<h5 id="143-安装-evervim">14.3. 安装 EverVim ：</h5>
<p>先安装依赖：</p>
<pre><code>sudo apt update
sudo apt install vim python3-pip python3-dev exuberant-ctags cmake gcc g++
</code></pre>
<p>安装 EverVim ：</p>
<pre><code>curl -sLf https://raw.githubusercontent.com/LER0ever/EverVim/master/Boot-EverVim.sh | bash
</code></pre>
<p>进 Vim 安装插件：</p>
<pre><code>vim
:PlugInstall
</code></pre>
<p>如果进 Vim 提示 Your ycmd is shut down ，需要安装 You Compute Me ：</p>
<blockquote>
<p>官方教程： <a href="https://github.com/ycm-core/YouCompleteMe#linux-64-bit">https://github.com/ycm-core/YouCompleteMe#linux-64-bit</a></p>
</blockquote>
<pre><code>sudo apt install build-essential cmake python3-dev
cd ~/.vim/bundle/YouCompleteMe
python3 install.py --clang-completer
</code></pre>
<h4 id="15-安装-grub-customizer">15、安装 Grub-customizer</h4>
<p>Grub-customizer 可以美化优化 Grub 引导界面。</p>
<pre><code>sudo add-apt-repository ppa:danielrichter2007/grub-customizer
sudo apt-get update
sudo apt-get install grub-customizer
</code></pre>
<h4 id="16-自动挂载硬盘">16、自动挂载硬盘</h4>
<p>16.1. 查看硬盘的 UUID 和 Type ：</p>
<pre><code>sudo blkid
</code></pre>
<p>记录下UUID和Type。<br>
16.2. 创建挂载目录</p>
<pre><code>cd ~
sudo mkdir Files
sudo chown -R eallion:eallion Files
</code></pre>
<p>16.3. 查看自己的 uid gid</p>
<pre><code>id eallion
</code></pre>
<p>16.4. 编辑配置文件：</p>
<pre><code>sudo vim /etc/fstab
</code></pre>
<p>按格式添加：</p>
<pre><code>UUID=xxxx	/mount-folder	type	defaults	0	0
</code></pre>
<p>如：</p>
<pre><code>UUID=0002AC	/home/eallion/Files	ntfs	defaults,uid=1000,gid=1000,umask=022	0	0
</code></pre>
<p>如果不加 uid gid ，自动挂载后是 root 权限，可能无法读写。</p>
<h4 id="17-安装-openssh-server">17、安装 Openssh-Server</h4>
<pre><code>sudo apt install openssh-server
</code></pre>
<p>配置Google Authenticator：（非必须，可选）</p>
<pre><code>sudo apt install libpam-google-authenticator
</code></pre>
<p>生成二维码：</p>
<pre><code>google-authenticator
</code></pre>
<p>修改配置以加载 Google-authenticator：</p>
<pre><code>sudo vim /etc/pam.d/sshd
</code></pre>
<p>添加：</p>
<pre><code>auth required pam_google_authenticator.so
</code></pre>
<p>修改 SSH 配置：</p>
<pre><code>sudo vim /etc/ssh/sshd_config
</code></pre>
<p>把</p>
<pre><code>ChallengeResponseAuthentication no
</code></pre>
<p>改为：</p>
<pre><code>ChallengeResponseAuthentication yes
</code></pre>
<p>修改 SSH 端口：</p>
<pre><code>Port 65537
</code></pre>
<h4 id="18-火焰截图-flameshot">18、火焰截图 Flameshot</h4>
<pre><code>sudo apt install flameshot 
</code></pre>
<p>设置截图快捷键：<br>
<code>系统设置</code> - <code>设备</code> - <code>键盘快捷键</code> - <code>自定义快捷键</code> 点加号添加一个：</p>
<pre><code>名称：flameshot
命令：flameshot gui
设置快捷键：（按键盘设置）
</code></pre>
<h4 id="19-禁用hdmi默认音频输出">19、禁用HDMI默认音频输出</h4>
<p>当主机接有音响、耳机、HDMI设备的话，Ubuntu默认是采用HDMI输出音频。Ubuntu自带的声音设置修改后不能保存，下次又还原成默认的。<br>
安装PulseAudio ：</p>
<pre><code>sudo apt install pavucontrol
</code></pre>
<p>然后按<code>Super</code>键在<code>Dash</code>中打开<code>PulseAudio</code>，在<code>设备</code>选项卡中关闭HDMI即可。</p>
<hr>
<h3 id="安装常用软件">安装常用软件</h3>
<p>推荐一些常用的软件：</p>
<ul>
<li>Telegram</li>
</ul>
<pre><code>sudo snap install telegram-desktop
</code></pre>
<ul>
<li>Spofity</li>
</ul>
<pre><code>sudo snap install spotify
</code></pre>
<ul>
<li>qBittorrent</li>
</ul>
<pre><code>sudo apt install qbittorrent
</code></pre>
<ul>
<li>Termius</li>
</ul>
<pre><code>sudo snap install termius-app
</code></pre>
<ul>
<li>Gimp</li>
</ul>
<pre><code>sudo snap install gimp
</code></pre>
<ul>
<li>Steam</li>
</ul>
<pre><code>sudo apt install steam
</code></pre>
<ul>
<li>Filezilla</li>
</ul>
<pre><code>sudo apt install filezilla
</code></pre>
<ul>
<li>Nextcloud</li>
</ul>
<pre><code>https://nextcloud.com/install/#install-clients
</code></pre>
<ul>
<li>VLC</li>
</ul>
<pre><code>sudo snap install vlc
</code></pre>
<ul>
<li>Virtualbox</li>
</ul>
<pre><code>sudo apt install virtualbox
</code></pre>
<ul>
<li>Visual Studio Code</li>
</ul>
<pre><code>sudo snap install code --classic
</code></pre>
<ul>
<li>Slack</li>
</ul>
<pre><code>sudo snap install slack --classic
</code></pre>
<ul>
<li>ReText</li>
</ul>
<pre><code>sudo apt install retext
</code></pre>
<ul>
<li>QQ （ 2.0版的 Linux QQ 可用性还是很差，真的不想推荐 ）</li>
</ul>
<pre><code>https://im.qq.com/linuxqq/index.html 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea git push 同步到多个仓库]]></title>
        <id>https://blog.eallion.com/post/git_push_multi_urls</id>
        <link href="https://blog.eallion.com/post/git_push_multi_urls">
        </link>
        <updated>2019-12-17T15:02:51.000Z</updated>
        <summary type="html"><![CDATA[<p>把 Gridea 同步到多个仓库，实现国内解析到 Coding Pages，国外解析到 Git Pages。</p>
]]></summary>
        <content type="html"><![CDATA[<p>把 Gridea 同步到多个仓库，实现国内解析到 Coding Pages，国外解析到 Git Pages。</p>
<!-- more -->
<h3 id="准备工作">准备工作：</h3>
<ul>
<li>创建 Git Pages 仓库 <a href="https://eallion.github.io">eallion.github.io</a></li>
<li>创建 Coding Pages 仓库 <a href="https://eallion.coding.me">eallion.coding.me</a></li>
<li>申请 <a href="https://github.com/settings/tokens/new">Github token</a></li>
<li>申请 Coding token <a href="https://dev.tencent.com/user/account/setting/tokens/new">访问令牌</a></li>
<li>在 Gridea 里配置好 Git Pages</li>
</ul>
<h3 id="配置-gitconfig">配置 <code>.git/config</code></h3>
<pre><code>cd ~/Documents/Gridea/output
git remote set-url --add --push origin https://[Github 用户名]:[Github_token]@github.com/[Github 用户名]/[Github 仓库].git
git remote set-url --add --push origin https://[Coding 用户名]:[Coding 访问令牌]@git.dev.tencent.com/[Coding 用户名]/[Coding 仓库].git
</code></pre>
<blockquote>
<p>顺便说一下：<code>https://[Github 用户名]:[Github_token]@github.com/[Github 用户名]/[Github 仓库].git</code>这行代码，<code>git push</code> 免密码。</p>
</blockquote>
<p>输入：<code>git remote -v</code>，如果有如下提示，即有 2 条 (push) 代码，则说明配置正确：</p>
<figure data-type="image" tabindex="1"><img src="https://blog.eallion.com/post-images/1576594996184.png" alt="FlameShot_2019-12-17_224644"></figure>
<h3 id="dns解析">DNS解析</h3>
<p>解析 CNAME 的时候，国内的解析到 Coding Pages, 国外的解析到 Git Pages.</p>
<p><img src="https://blog.eallion.com/post-images/1576595132692.png" alt="FlameShot_2019-12-17_225742"><br>
如下图所示：<br>
<img src="https://blog.eallion.com/post-images/1576595146845.png" alt="FlameShot_2019-12-17_225838"></p>
<h3 id="同步">同步</h3>
<p>配置好后，正常同步即可。</p>
<h3 id="其他注意事项">其他注意事项</h3>
<p>如果开启了 https, 但是 Let's Encrypt 只有3个月的有效时间，到时候关系到续期的问题，续期的时候需要暂时解析，如续期 Git Pages 的证书，就暂停 Coding Pages 的解析，反之一样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 随机网站描述]]></title>
        <id>https://blog.eallion.com/post/gridea-random-description</id>
        <link href="https://blog.eallion.com/post/gridea-random-description">
        </link>
        <updated>2019-12-16T16:51:45.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>DEMO: <a href="https://eallion.github.io">https://eallion.github.io</a></p>
</blockquote>
<p>我的 Gridea 生成的 Git Pages 静态博客，随机站点描述引用的是“<a href="https://www.jinrishici.com/">今日诗词</a>”的 API 。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>DEMO: <a href="https://eallion.github.io">https://eallion.github.io</a></p>
</blockquote>
<p>我的 Gridea 生成的 Git Pages 静态博客，随机站点描述引用的是“<a href="https://www.jinrishici.com/">今日诗词</a>”的 API 。</p>
<!-- more -->
<h3 id="step-1">Step 1:</h3>
<p>找到对应的 theme 文件目录，如 <code>Notes</code>：<br>
进入<code>Gridea/themes/notes/templates/includes</code>，用编辑器打开<code>footer.ejs</code>，在合适的位置添加：</p>
<pre><code>&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre>
<p>保存退出即可。</p>
<h3 id="step-2">Step 2:</h3>
<p>打开<code>header.ejs</code></p>
<pre><code>  &lt;p class=&quot;site-description&quot;&gt;
    &lt;%- themeConfig.siteDescription %&gt;
  &lt;/p&gt;
</code></pre>
<p>修改为：</p>
<pre><code>&lt;p class=&quot;site-description&quot; id=&quot;jinrishici-sentence&quot;&gt;...&lt;/p&gt;
</code></pre>
<h3 id="step-3">Step 3:</h3>
<p>在软件内，找到<code>主题</code>-<code>基础配置</code>，清空 <code>网站描述</code> 里面的内容。</p>
<h3 id="step-4">Step 4:</h3>
<p>点击同步。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://blog.eallion.com/post/hello-gridea</id>
        <link href="https://blog.eallion.com/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>